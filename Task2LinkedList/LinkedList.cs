namespace OOAP1.Task2LinkedList
{
    public abstract class LinkedList<T>
    {
        // Конструктор 
        
        // Постусловие: создан новый пустой список.
        // LinkedList<T> LinkedList()
        
        // Команды
        
        // Предусловие: список не пуст.
        // Постусловие: курсор указывает на первый элемент списка.
        public abstract void Head(); // -- установить курсор на первый узел в списке; 

        // Предусловие: список не пуст.
        // Постусловие: курсор указывает на последний элемент списка.
        public abstract void Tail();

        // Предусловие: курсор не соответствует концу списка.
        // Постусловие: курсор установлен на правый соседний узел относительно текущего
        public abstract void Right();

        // Предусловие: список не пуст.
        // Постусловие: курсор установлен на следующий узел относительно текущего с искомым значением
        public abstract void Find(T value);

        // Предусловие: список не пуст.
        // Постусловие: в список добавлено новое значение справа от текущего узла.
        public abstract void PutRight(T value);

        // Предусловие: список не пуст.
        // Постусловие: в список добавлено новое значение слева от текущего узла.
        public abstract void PutLeft(T value);
        
        // Постусловие:
        //     - Из списка удален текущий узел.
        //     - Курсор смещён к правому соседу, если он есть, в противно случае - к левому соседу.
        public abstract void Remove();
        
        // Постусловие: из списка удалены все узлы с указанным значением.
        public abstract void RemoveAll(T value);

        // Постусловие: список пуст.
        public abstract void Clear();

        // Предусловие: список пуст.
        // Постусловие: в список добавлено новое значение.
        public abstract void AddToEmpty();

        // Предусловие: список не пуст.
        // Постусловие: в конец списка добавлено новое значение.
        public abstract void AddTail();

        // Предусловие: список не пуст.
        // Постусловие: значение текущего узла заменено на заданное
        public abstract void Replace();

        // Запросы
        
        public abstract int Size(); // -- посчитать количество узлов в списке;

        // Предусловие: список не пуст.
        public abstract T Get(); // -- получить значение текущего узла;
        
        public abstract bool IsHead(); // -- находится ли курсор в начале списка?

        public abstract bool IsTail(); // -- находится ли курсор в конце списка?

        public abstract bool IsValue(); // -- установлен ли курсор на какой-либо узел в списке?
        
        // Доп. запросы
        
    }

    public class LinkedList
    {
        
    }
}
